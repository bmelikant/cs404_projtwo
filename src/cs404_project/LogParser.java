package cs404_project;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.JFileChooser;
import java.io.File;  
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import com.isti.util.IstiFileFilter;

/**
 *
 * @author KJSFA1
 */

public class LogParser extends javax.swing.JFrame {
    
    private String filename = "";
    HashMap<String,String> badusers = new HashMap<>();  // Hash(user,IP) for bad users.
                                                        // Make this global for the CSV
                                                        // export button...

    /**
     * Creates new form LogParser
     */
    public LogParser() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OwnCloud Failed Logon Parser");

        jButton1.setLabel("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setEnabled(false);

        jButton2.setText("Execute");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "IP Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);

        jTextField2.setText("3");

        jLabel1.setText("failed logons within");

        jTextField3.setText("5");

        jLabel2.setText("minutes");

        jLabel3.setText("   ");
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel3.setEnabled(false);
        jLabel3.setFocusable(false);

        jLabel4.setText(" ");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel4.setEnabled(false);
        jLabel4.setFocusable(false);
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jMenu1.setText("File");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, 0));
        jMenuItem3.setText("Export to CSV");
        jMenuItem3.setEnabled(false);
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, 0));
        jMenuItem1.setText("Clear");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, 0));
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jLabel1)
                                .addGap(6, 6, 6)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Browse button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        //FileFilter ff = new FileNameExtensionFilter("Log Files (*.log)", "log");
        IstiFileFilter ff = new IstiFileFilter("*.log*", "Log Files");
        fileChooser.addChoosableFileFilter(ff);
        fileChooser.setFileFilter(ff);
        int result = fileChooser.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            File selectedFile = fileChooser.getSelectedFile();
            filename = selectedFile.getAbsolutePath();
            
            try
            {
                BufferedReader reader = new BufferedReader(new FileReader(filename));
                String line = reader.readLine();
                reader.close();

                if(line.matches("^.*\\p{javaSpaceChar}.*\\p{javaSpaceChar}.*\\p{javaSpaceChar}.*\\p{javaSpaceChar}ownCloud\\[.*\\].*$")) // Matches owncloud
                {
                    jTextField1.setText(filename);
                    jButton2.setEnabled(true);
                    jLabel3.setText("File selected: " + filename);
                }
                else
                {
                    filename = "";
                    JOptionPane.showMessageDialog(null, "Selected file is not an ownCloud log file.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    jLabel3.setText("ERROR: Selected file is not an ownCloud log file.");
                }
            }
            catch (Exception e)
            {
                jLabel3.setText("Error reading file");
            }
        }
        else
        {
            if(filename.equals(""))
                jLabel3.setText("File not selected");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Execute button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        final long startTime = System.currentTimeMillis(); // Measure how fast the algorithm is
        
        ArrayList<ArrayList<String>> records = new ArrayList<ArrayList<String>>();
        ArrayList<String> tmpRecord;
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        
        //
        // READ FILE
        //
        try
        {
          BufferedReader reader = new BufferedReader(new FileReader(filename));
          String line;
          String[] tmparr;

          while ((line = reader.readLine()) != null)
          {
              if(line.contains("hipaa") && line.contains("LOGIN: Failed") && !line.contains("message repeated"))
              {
                //JOptionPane.showMessageDialog(null, line, "DEBUG", JOptionPane.INFORMATION_MESSAGE);
                tmpRecord = new ArrayList<String>();
                
                // Dynamically determine the servername for the Date split()
                tmparr = line.split("\\s+");
                String hostname = tmparr[3];
                
                tmparr = line.split(" " + hostname + " ");
                tmpRecord.add(tmparr[0]); // Date
                
                tmparr = tmparr[1].split("[\\[\\]]");
                tmpRecord.add(tmparr[3]); // IP

                tmparr = tmparr[4].split("[()]");
                tmpRecord.add(tmparr[1]); // User
                
                records.add(tmpRecord);
              }
          }
          reader.close();
        }
        catch (Exception e)
        {
          jLabel3.setText("Error reading file");
          //System.err.format("Exception occurred trying to read '%s'.", filename);
          //e.printStackTrace();
          return;
        }
        
        
        //
        // LOGIC
        //
        
        // User -> Date,Date,Date,etc.  IP is ignored in the working set
        // since it can be obtained from cur.get(1).
        HashMap<String,ArrayList<String>> working = new HashMap<>();
        
        Boolean notfound = true; // To determine if already found in below loop
        
        int failThreshold;
        try
        {
            failThreshold = Integer.parseInt(jTextField2.getText());
        }
        catch (Exception e)
        {
            failThreshold = 3;
            jTextField2.setText("3");
        }
        
        int minThreshold;
        try
        {
            // Convert mins to secs to make the calc more precise
            minThreshold = Integer.parseInt(jTextField3.getText()) * 60;
        }
        catch (Exception e)
        {
            minThreshold = 300; // 5 * 60
            jTextField3.setText("5");
        }
        
        // Loop through all users read from the file
        for (ArrayList<String> cur : records)
        {
            // Verify we haven't already determined the user is bad
            notfound = true;
            if(badusers.containsKey(cur.get(2))) notfound = false;
            
            // If the user isn't already set to be disabled, run the checks...
            if(notfound)
            {
                // If user is already in the working set, add the cur date
                if(working.containsKey(cur.get(2)))
                    working.get(cur.get(2)).add(cur.get(0));
                // else PUT a new entry in the working map
                else
                    working.put(cur.get(2),new ArrayList<String>(Arrays.asList(cur.get(0))));
                    
                // Save the last (most recent) date entry for future comparisons
                SimpleDateFormat inputDateFormat = new SimpleDateFormat("MMM dd HH:mm:ss");
                Date startDate = null, curDate = null;
                try
                {
                    startDate = inputDateFormat.parse(working.get(cur.get(2)).get(working.get(cur.get(2)).size()-1));
                }
                catch (ParseException e)
                {
                    e.printStackTrace();
                }
                
                // Create a minThreshold window fail counter
                int count = 0;
                
                // Loop backwards through the date array and count dates until
                // you hit the minThreshold
                for(int x = working.get(cur.get(2)).size()-1; x >= 0; x--)
                {
                    try
                    {
                        curDate = inputDateFormat.parse(working.get(cur.get(2)).get(x));
                    }
                    catch (ParseException e)
                    {
                        e.printStackTrace();
                    }
                    long secDiff = TimeUnit.MILLISECONDS.toSeconds(startDate.getTime() - curDate.getTime());
                    
                    // if curdate is within minThreshold minutes (saved in seconds) of startDate
                    if(secDiff <= minThreshold)
                    {
                        count++;
                    
                        // If the date array contains failThreshold or more dates
                        // within the minThreshold timeframe, we have a bad user
                        if (count >= failThreshold)
                           badusers.put(cur.get(2),cur.get(1));
                    }
                    else
                        break;
                }
            }
	}
        
        // Display bad users
        for(String key : badusers.keySet())
            model.addRow(new Object[]{key, badusers.get(key)});

        final long endTime = System.currentTimeMillis(); // End time of algorithm
        jLabel3.setText("Parse complete: " + (endTime - startTime) + "ms");
        jLabel4.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabel4.setText(Integer.toString(badusers.size()) + " bad users");
        jButton2.setEnabled(false);
        jButton1.setEnabled(false);
        jTextField2.setEnabled(false);
        jTextField3.setEnabled(false);
        jMenuItem3.setEnabled(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    // Exit menu
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    // Clear Menu
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        jTextField1.setText("");
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        filename = "";
        //badusers.clear();
        badusers = null;
        badusers = new HashMap<>();
        jButton2.setEnabled(false);
        jButton1.setEnabled(true);
        jTextField2.setEnabled(true);
        jTextField3.setEnabled(true);
        jMenuItem3.setEnabled(false);
        jLabel3.setText(" ");
        jLabel4.setText(" ");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // CSV Export
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileFilter ff = new FileNameExtensionFilter("CSV Files (*.csv)", "csv");
        fileChooser.addChoosableFileFilter(ff);
        fileChooser.setFileFilter(ff);
        int result = fileChooser.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            File selectedFile = fileChooser.getSelectedFile();
            filename = selectedFile.getAbsolutePath();
            
            if(!filename.matches("^.*\\.csv$"))
                filename += ".csv";
            
            try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename), "utf-8")))
            {
                for(String key : badusers.keySet())
                {
                    writer.write(key + "," + badusers.get(key));
                    writer.newLine();
                }

                jLabel3.setText("CSV export: success");
            }
            catch(IOException e)
            {
                //e.printStackTrace();
                jLabel3.setText("CSV export: error");
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogParser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
